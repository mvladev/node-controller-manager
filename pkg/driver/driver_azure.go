/*
Copyright 2017 The Gardener Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package driver

import (
	"os"
	"fmt"

	v1alpha1 "github.com/gardener/node-controller-manager/pkg/apis/machine/v1alpha1"
	corev1 "k8s.io/api/core/v1" 

	"github.com/golang/glog"
	"github.com/Azure/azure-sdk-for-go/arm/compute"
	"github.com/Azure/azure-sdk-for-go/arm/network"
	"github.com/Azure/azure-sdk-for-go/arm/disk"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/to"
	"github.com/Azure/go-autorest/autorest/utils"
)

type AzureDriver struct {
	AzureMachineClass  *v1alpha1.AWSMachineClass
	CloudConfig		   *corev1.Secret
	UserData 		   string
	InstanceId		   string
}

func NewAzureDriver(create func() (string, error), delete func() error, existing func() (string, error)) Driver {
	return &AWSDriver{}
}

// Create
func (d *AzureDriver) Create() (string, string, error) {

	//VM-name has to be in small letters
	vmName := "sample-vm"
	createVM(vmName, "image-publisher", "image-offer", "image-sku")

    return vmName, vmName, nil
}

// Delete
func (d *AzureDriver) Delete() error {
    
    //VM-name has to be in small letters
	vmName := "sample-vm"
	nicName := vmName + "-nic"
	diskName := vmName + "-os-disk"

	cancel := make(chan struct{})

	_, errChan := vmClient.Delete(groupName, vmName, cancel)
	onErrorFail(<-errChan, fmt.Sprintf("vmClient.Delete failed for '%s'", vmName))
	glog.Infof("Deleted '%s' virtual machine...\n", vmName)

	_, errChan = interfacesClient.Delete(groupName, nicName, cancel)
	onErrorFail(<-errChan, fmt.Sprintf("interfacesClient.Delete for NIC '%s' failed", nicName))
	glog.Infof("\tDeleted NIC '%s' successfully\n", nicName)

	_, errChan = diskClient.Delete(groupName, diskName, cancel)
	onErrorFail(<-errChan, fmt.Sprintf("diskClient.Delete for NIC '%s' failed", nicName))
	glog.Infof("\tDeleted Disk '%s' successfully\n", diskName)
    
    return nil
}

// GetExisting
func (d *AzureDriver) GetExisting() (string, error) {
	return d.InstanceId, nil
}

func init() {
	subscriptionID := getEnvVarOrExit("AZURE_SUBSCRIPTION_ID")
	authorizer, err := utils.GetAuthorizer(azure.PublicCloud)
	onErrorFail(err, "utils.GetAuthorizer failed")
	createClients(subscriptionID, authorizer)
}

var (
	groupName   = "sample-group-name"
	location    = "westeurope"
	vNetName    = "sample-vNet-name"
	subnetName  = "workers"

	interfacesClient network.InterfacesClient
	vmClient         compute.VirtualMachinesClient
	subnetClient     network.SubnetsClient
	diskClient    	 disk.DisksClient
)

// createVM creates a VM in the provided subnet.
func createVM(vmName, publisher, offer, sku string) {

	glog.Infof("\tGet subnet info for subnet '%s'...\n", subnetName)
	subnet, err := subnetClient.Get(groupName, vNetName, subnetName, "")
	onErrorFail(err, fmt.Sprintf("subnetClient.Get failed for subnet '%s'", subnetName))
	nicParameters := createNIC(vmName, &subnet)

	cancel := make(chan struct{})
	glog.Infof("Create '%s' VM...\n", vmName)
	vm := setVMparameters(vmName, publisher, offer, sku, *nicParameters.ID)
	vmResult, errChan := vmClient.CreateOrUpdate(groupName, vmName, vm, cancel)
	onErrorFail(<-errChan, "createVM failed")

	glog.Infof("vmResult: '%s'\n", vmResult)
}

// setVMparameters builds the VirtualMachine argument for creating or updating a VM.
func setVMparameters(vmName, publisher, offer, sku, nicID string) compute.VirtualMachine {
	
	tags := map[string]*string{
		"Name": &vmName,
		"kubernetes.io-cluster-name": to.StringPtr("1"),
		"kubernetes.io-role-node": to.StringPtr("1"),
	}

	return compute.VirtualMachine{
		Location: &location,
		VirtualMachineProperties: &compute.VirtualMachineProperties{
			HardwareProfile: &compute.HardwareProfile{
				VMSize: compute.VirtualMachineSizeTypesStandardDS1V2,
			},
			StorageProfile: &compute.StorageProfile{
				ImageReference: &compute.ImageReference{
					Publisher: &publisher,
					Offer:     &offer,
					Sku:       &sku,
					Version:   to.StringPtr("image-reference-version"),
				},
				OsDisk: &compute.OSDisk{
					Name: to.StringPtr(vmName + "-os-disk"),
					Caching: compute.CachingTypesNone,
					ManagedDisk: &compute.ManagedDiskParameters{
						StorageAccountType: compute.StandardLRS,
					},
					DiskSizeGB: to.Int32Ptr(35),
					CreateOption: compute.DiskCreateOptionTypesFromImage,
				},
			},
			OsProfile: &compute.OSProfile{
				ComputerName:  &vmName,
				AdminUsername: to.StringPtr("admin"),
				CustomData: to.StringPtr(""),
				LinuxConfiguration: &compute.LinuxConfiguration {
					DisablePasswordAuthentication: to.BoolPtr(true),
					SSH: &compute.SSHConfiguration{
						PublicKeys: &[]compute.SSHPublicKey{
							{
								Path: to.StringPtr("/home/admin/.ssh/authorized_keys"),
								KeyData: to.StringPtr("ssh-rsa sample-key-here"),
							},
						},
					},
				},
			},
			NetworkProfile: &compute.NetworkProfile{
				NetworkInterfaces: &[]compute.NetworkInterfaceReference{
					{
						ID: &nicID,
						NetworkInterfaceReferenceProperties: &compute.NetworkInterfaceReferenceProperties{
							Primary: to.BoolPtr(false),
						},
					},
				},
			},
			AvailabilitySet: &compute.SubResource{
				ID: to.StringPtr("/subscriptionID/sample-url/avset"),
			},
		},
		Tags: &tags,
	}
}

// createPIPandNIC creates a public IP address and a network interface in an existing subnet.
// It returns a network interface ready to be used to create a virtual machine.
func createNIC(machine string, subnetInfo *network.Subnet) (*network.Interface) {


	nicName := fmt.Sprintf("%s-nic", machine)
	glog.Infof("\tCreate NIC '%s'...\n", nicName)

	enableIPForwarding := true

	nicParameters := network.Interface{
		Location: &location,
		InterfacePropertiesFormat: &network.InterfacePropertiesFormat{
			IPConfigurations: &[]network.InterfaceIPConfiguration{
				{
					Name: &nicName,
					InterfaceIPConfigurationPropertiesFormat: &network.InterfaceIPConfigurationPropertiesFormat{
						PrivateIPAllocationMethod: network.Dynamic,
						Subnet: subnetInfo,
					},
				},
			},
			//ResourceGUID: &groupName,
			EnableIPForwarding: &enableIPForwarding,
		},
	}

	cancel := make(chan struct{})
	output, errChan := interfacesClient.CreateOrUpdate(groupName, nicName, nicParameters, cancel)
	onErrorFail(<-errChan, fmt.Sprintf("interfacesClient.CreateOrUpdate for NIC '%s' failed", nicName))
	glog.Infof("\tCreated NIC '%s' successfully\n %s", nicName, output)

	glog.Infof("\tGet NIC info for %s...\n", nicName)
	nicParameters, err := interfacesClient.Get(groupName, nicName, "")
	onErrorFail(err, fmt.Sprintf("interfaces.Get for NIC '%s' failed", nicName))

	return &nicParameters
}

// onErrorFail prints a failure message and exits the program if err is not nil.
func onErrorFail(err error, message string) {
	if err != nil {
		glog.Infof("%s: %s\n", message, err)
		os.Exit(1)
	}
}

// getEnvVarOrExit returns the value of specified environment variable or terminates if it's not defined.
func getEnvVarOrExit(varName string) string {
	value := os.Getenv(varName)
	if value == "" {
		fmt.Printf("Missing environment variable '%s'\n", varName)
		os.Exit(1)
	}

	return value
}


func createClients(subscriptionID string, authorizer *autorest.BearerAuthorizer) {
	subnetClient = network.NewSubnetsClient(subscriptionID)
	subnetClient.Authorizer = authorizer

	interfacesClient = network.NewInterfacesClient(subscriptionID)
	interfacesClient.Authorizer = authorizer

	vmClient = compute.NewVirtualMachinesClient(subscriptionID)
	vmClient.Authorizer = authorizer

	diskClient = disk.NewDisksClient(subscriptionID)
	diskClient.Authorizer = authorizer
}